package com.umc.timeCAlling.presentation.login.adapter

import android.app.Application
import android.content.Context
import android.content.SharedPreferences
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.drawable.BitmapDrawable
import android.net.Uri
import android.util.Log
import androidx.compose.ui.graphics.vector.path
import androidx.core.content.ContextCompat
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.umc.timeCAlling.R
import com.google.firebase.messaging.FirebaseMessaging
import com.umc.timeCAlling.MyFirebaseMessagingService
import com.umc.timeCAlling.domain.model.request.login.KakaoLoginRequestModel
import com.umc.timeCAlling.domain.model.request.login.KakaoSignupRequestModel
import com.umc.timeCAlling.domain.model.response.login.KakaoLoginResponseModel
import com.umc.timeCAlling.domain.model.response.login.KakaoSignupResponseModel
import com.umc.timeCAlling.domain.model.response.login.KakaoUserInfoResponseModel
import com.umc.timeCAlling.domain.repository.LoginRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import timber.log.Timber
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.FileOutputStream
import java.io.InputStream
import javax.inject.Inject

@HiltViewModel
class SignupViewModel @Inject constructor(
    private val spf: SharedPreferences,
    application: Application,
    private val loginRepository: LoginRepository
) : ViewModel() {


    private val _kakaoAccessToken = MutableLiveData<String>()
    val kakaoAccessToken: LiveData<String> get() = _kakaoAccessToken

    private val _nickname = MutableLiveData<String>()
    val nickname: LiveData<String> get() = _nickname

    private val _profileImage = MutableLiveData<Uri?>()
    val profileImage: LiveData<Uri?> get() = _profileImage

    private val _avgPrepTime = MutableLiveData<Int>()
    val avgPrepTime: LiveData<Int> get() = _avgPrepTime

    private val _freeTime = MutableLiveData<String>()
    val freeTime: LiveData<String> get() = _freeTime

    private val _signupResult = MutableLiveData<KakaoSignupResponseModel?>()
    val signupResult: LiveData<KakaoSignupResponseModel?> get() = _signupResult

    private val _kakaoUserInfo = MutableLiveData<KakaoUserInfoResponseModel?>()
    val kakaoUserInfo: LiveData<KakaoUserInfoResponseModel?> get() = _kakaoUserInfo

    fun setKakaoAccessToken(token: String) {
        _kakaoAccessToken.value = token
    }

    fun setNickname(name: String) {
        _nickname.value = name
    }

    fun setProfileImage(uri: Uri) {
        _profileImage.value = uri
    }

    fun setAvgPrepTime(time: Int) {
        _avgPrepTime.value = time
    }

    fun setFreeTime(time: String) {
        _freeTime.value = time
    }

    private val context: Context = application

    private fun getMultipartBodyFromUri(context: Context, uri: Uri?, paramName: String): MultipartBody.Part? {
        if (uri == null) return null

        val contentResolver = context.contentResolver
        val inputStream: InputStream? = contentResolver.openInputStream(uri)
        val file = File(context.cacheDir, "profile_image.png")

        inputStream?.use { input ->
            FileOutputStream(file).use { output ->
                input.copyTo(output)
            }
        }

        val requestFile = file.asRequestBody("image/png".toMediaTypeOrNull())
        return MultipartBody.Part.createFormData(paramName, file.name, requestFile)
    }

    fun signup() {
            val profileImagePart = try {
                val profileImageUri = _profileImage.value
                if (profileImageUri != null) {
                    getMultipartBodyFromUri(context, profileImageUri, "profileImage") // UriÎ•º FileÎ°ú Î≥ÄÌôò ÌõÑ Multipart ÏÉùÏÑ±
                } else {
                    null // Í∏∞Î≥∏ ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄÎäî ÏÑúÎ≤ÑÏóêÏÑú Ï≤òÎ¶¨Ìï† ÏàòÎèÑ ÏûàÏúºÎØÄÎ°ú null ÌóàÏö©
                }
            val inputStream = profileImageUri?.let { context.contentResolver.openInputStream(it) }
            val selectedImageBitmap = BitmapFactory.decodeStream(inputStream)
            val defaultImageStream = ByteArrayOutputStream().apply {
                selectedImageBitmap.compress(Bitmap.CompressFormat.PNG, 100, this)
            }
            val defaultImageBytes = defaultImageStream.toByteArray()

            val requestBody =
                defaultImageBytes.toRequestBody("image/png".toMediaTypeOrNull()) // MIME ÌÉÄÏûÖ Íµ¨Ï≤¥Ìôî
            MultipartBody.Part.createFormData(
                "profileImage", "profile_image.png", requestBody
            )
        } catch (e: Exception) {
            Timber.e("Error creating MultipartBody.Part for profile image: ${e.message}")
            val emptyImageRequestBody =
                ByteArray(0).toRequestBody("image/png".toMediaTypeOrNull()) // Îπà Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠
            MultipartBody.Part.createFormData(
                "profileImage", "profile_image.png", emptyImageRequestBody
            )
        }

        val request = KakaoSignupRequestModel(
            kakaoAccessToken = _kakaoAccessToken.value ?: "",
            nickname = _nickname.value ?: "",
            avgPrepTime = _avgPrepTime.value ?: 0,
            freeTime = _freeTime.value ?: ""
        )

        Log.d("SignupViewModel", "$request")

        viewModelScope.launch {
            loginRepository.kakaoSignup(profileImagePart, request).onSuccess { response ->
                Log.d("SignupViewModel", "ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ! API Response: $response")

                spf.edit().apply {
                    putString("jwt", response.accessToken)
                    putString("refreshToken", response.refreshToken)
                    putBoolean("isLoggedIn", true)
                    apply()
                }
                Log.d("SignupViewModel", "Ïã†Í∑ú ÌöåÏõê Access Token Ï†ÄÏû• ÏôÑÎ£å: ${response.accessToken}")
                Log.d("SignupViewModel", "Ïã†Í∑ú ÌöåÏõê Refresh Token Ï†ÄÏû• ÏôÑÎ£å: ${response.refreshToken}")

                _signupResult.postValue(response) // ÏÑ±Í≥µ Ïãú Îç∞Ïù¥ÌÑ∞Î•º LiveDataÏóê Ï†ÑÎã¨
            }.onFailure { error ->
                _signupResult.postValue(null)
                Log.d("SignupViewModel", "ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®: ${error.message}")
            }
        }
    }

    fun handleLoginSuccess(accessToken: String, refreshToken: String, callback: (Boolean) -> Unit) {
        viewModelScope.launch {
            loginRepository.kakaoLogin(KakaoLoginRequestModel(accessToken)).onSuccess { response ->
                Log.d("SignupViewModel", "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: Access Token = ${response.accessToken}")
                Log.d("SignupViewModel", "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ: Refresh Token = ${response.refreshToken}")

                spf.edit().apply {
                    putString("jwt", response.accessToken)  // ÏÉà AccessToken Ï†ÄÏû•
                    putString("refreshToken", response.refreshToken)  // ÏÉà RefreshToken Ï†ÄÏû•
                    putBoolean("isLoggedIn", true)
                    apply()
                }
                // FCM ÌÜ†ÌÅ∞ Í∞±Ïã† ÏöîÏ≤≠
                FirebaseMessaging.getInstance().token.addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        val token = task.result
                        Log.d("SignupViewModel", "FCM token on login: $token")
                    } else {
                        Log.e("SignupViewModel", "Failed to get FCM token on login", task.exception)
                    }
                }
                callback(true)
            }.onFailure { error ->
                Log.e("SignupViewModel", "ÏÑúÎ≤Ñ Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${error.message}")
                callback(false)
            }
        }
    }

    fun clearAuthToken() {
        spf.edit().apply {
            remove("jwt") // üî• accessToken ÏÇ≠Ï†ú
            remove("refreshToken") // üî• refreshToken ÏÇ≠Ï†ú
            remove("isLoggedIn") // üî• Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
            apply()
        }
        Log.d("SignupViewModel", "ÌÜ†ÌÅ∞ ÏÇ≠Ï†ú ÏôÑÎ£å: accessToken Î∞è refreshToken Ï¥àÍ∏∞ÌôîÎê®")
    }

}
